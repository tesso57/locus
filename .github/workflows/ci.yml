name: CI

on:
  push:
    branches: [main]
  pull_request:
    branches: [main]

permissions:
  contents: read

concurrency:
  group: ci-${{ github.ref }}
  cancel-in-progress: true

jobs:
  check-test:
    name: Check & Test (${{ matrix.os }} / Deno ${{ matrix.deno }})
    runs-on: ${{ matrix.os }}
    continue-on-error: ${{ matrix.deno == 'canary' }}
    strategy:
      fail-fast: false
      matrix:
        os: [ubuntu-latest, macos-latest, windows-latest]
        deno: ["2.x", "canary"]

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0 # Git-aware tool needs full history

      - name: Setup Deno
        uses: denoland/setup-deno@v2
        with:
          deno-version: ${{ matrix.deno }}
          cache: true

      - name: Check deno.lock is up to date
        run: deno cache --frozen --lock=deno.lock src/cli.ts

      - name: Format check
        run: deno fmt --check

      - name: Lint
        run: deno lint

      - name: Run tests with coverage
        run: deno test --allow-read --allow-write --allow-env --allow-run --coverage=coverage

      - name: Generate coverage report
        if: matrix.os == 'ubuntu-latest' && matrix.deno == '2.x'
        run: deno coverage coverage --lcov --output=coverage.lcov

      - name: Upload coverage to Codecov
        if: matrix.os == 'ubuntu-latest' && matrix.deno == '2.x'
        uses: codecov/codecov-action@v4
        with:
          files: ./coverage.lcov
          fail_ci_if_error: false
          token: ${{ secrets.CODECOV_TOKEN }}

      - name: Upload coverage artifact
        if: matrix.os == 'ubuntu-latest' && matrix.deno == '2.x'
        uses: actions/upload-artifact@v4
        with:
          name: coverage-report
          path: coverage.lcov
          retention-days: 14

  compile-test:
    name: Test compilation
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix:
        os: [ubuntu-latest, macos-latest, windows-latest]

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Setup Deno
        uses: denoland/setup-deno@v2
        with:
          deno-version: "2.x"
          cache: true

      - name: Compile binary
        run: deno task compile

      - name: Test binary execution
        shell: bash
        run: |
          if [[ "${{ matrix.os }}" == "windows-latest" ]]; then
            ./locus.exe --version
          else
            ./locus --version
          fi

  publish-npm:
    name: Publish to npm
    runs-on: ubuntu-latest
    needs: [check-test, compile-test]
    if: github.ref == 'refs/heads/main'
    permissions:
      contents: read
      id-token: write

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Read package version
        id: pkg
        run: |
          VERSION=$(jq -r '.version' npm/package.json)
          echo "version=$VERSION" >> "$GITHUB_OUTPUT"

      - name: Check if version already exists on npm
        id: exist
        run: |
          if npm view @tesso/locus@${{ steps.pkg.outputs.version }} > /dev/null 2>&1; then
            echo "publish=false" >> "$GITHUB_OUTPUT"
            echo "⚠️ @tesso/locus@${{ steps.pkg.outputs.version }} already exists on npm – skipping publish"
          else
            echo "publish=true" >> "$GITHUB_OUTPUT"
          fi

      - name: Publish package to npm
        if: steps.exist.outputs.publish == 'true'
        run: |
          cd npm
          npm publish --access public
        env:
          NODE_AUTH_TOKEN: ${{ secrets.NPM_TOKEN }}

  publish-jsr:
    name: Publish to JSR
    runs-on: ubuntu-latest
    needs: [check-test, compile-test]
    if: github.ref == 'refs/heads/main'
    permissions:
      contents: read
      id-token: write
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Publish package to JSR
        run: npx jsr publish

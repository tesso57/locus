import { Command } from "https://deno.land/x/cliffy@v1.0.0-rc.4/command/mod.ts";
import { join } from "https://deno.land/std@0.224.0/path/mod.ts";
import { exists } from "https://deno.land/std@0.224.0/fs/mod.ts";
import { AddOptions, FrontMatter } from "../types.ts";
import { getRepoInfo } from "../utils/git.ts";
import { createTaskMarkdown, validateFileName } from "../utils/markdown.ts";
import { resolveTaskDir } from "../utils/path.ts";
import { generateFileName } from "../utils/filename.ts";
import { loadConfig } from "../config/index.ts";

export function createAddCommand(): Command {
  return new Command()
    .name("add")
    .description("Êñ∞„Åó„ÅÑ„Çø„Çπ„ÇØ„ÇíËøΩÂä†")
    .arguments("<title:string>")
    .option("-b, --body <body:string>", "„Çø„Çπ„ÇØ„ÅÆÊú¨Êñá")
    .option("-t, --tags <tags:string[]>", "„Çø„Ç∞Ôºà„Ç´„É≥„ÉûÂå∫Âàá„ÇäÔºâ")
    .option("-p, --priority <priority:string>", "ÂÑ™ÂÖàÂ∫¶")
    .option("-s, --status <status:string>", "„Çπ„ÉÜ„Éº„Çø„Çπ")
    .option("--no-git", "GitÊÉÖÂ†±„Çí‰ΩøÁî®„Åó„Å™„ÅÑ")
    .action(async (options, title: string) => {
      await addTask({
        title,
        body: options.body,
        tags: options.tags,
        priority: options.priority,
        status: options.status,
      }, !options.git);
    });
}

async function addTask(options: AddOptions, noGit: boolean = false): Promise<void> {
  try {
    // Get repository information
    const repoInfo = noGit ? null : await getRepoInfo();

    // Resolve task directory
    const taskDir = await resolveTaskDir(repoInfo);

    // Generate filename
    const fileName = await generateFileName(options.title);

    // Validate filename
    validateFileName(fileName);

    const taskPath = join(taskDir, fileName);

    // Check if file already exists
    if (await exists(taskPath)) {
      console.error(`„Ç®„É©„Éº: „Éï„Ç°„Ç§„É´ '${taskPath}' „ÅØÊó¢„Å´Â≠òÂú®„Åó„Åæ„Åô`);
      Deno.exit(1);
    }

    // Load config for defaults
    const config = await loadConfig();

    // Create frontmatter
    const frontmatter: FrontMatter = {
      ...config.defaults,
    };

    if (options.tags && options.tags.length > 0) {
      frontmatter.tags = options.tags;
    }

    if (options.priority) {
      frontmatter.priority = options.priority;
    }

    if (options.status) {
      frontmatter.status = options.status;
    }

    // Create task content
    const content = createTaskMarkdown(
      options.title,
      options.body,
      frontmatter,
    );

    // Write file
    await Deno.writeTextFile(taskPath, content);

    // Success message
    console.log(`‚ú® „Çø„Çπ„ÇØ„Çí‰ΩúÊàê„Åó„Åæ„Åó„Åü: ${taskPath}`);

    if (repoInfo) {
      console.log(`üìÅ „É™„Éù„Ç∏„Éà„É™: ${repoInfo.owner}/${repoInfo.repo}`);
    } else if (!noGit) {
      console.log(`üìÅ Â†¥ÊâÄ: „Éá„Éï„Ç©„É´„Éà„ÅÆ„Çø„Çπ„ÇØ„Éá„Ç£„É¨„ÇØ„Éà„É™`);
    }

    // Show task details
    console.log(`\nüìã „Çø„Çπ„ÇØË©≥Á¥∞:`);
    console.log(`  „Çø„Ç§„Éà„É´: ${options.title}`);
    console.log(`  „Éï„Ç°„Ç§„É´Âêç: ${fileName}`);
    console.log(`  „Çπ„ÉÜ„Éº„Çø„Çπ: ${frontmatter.status}`);
    console.log(`  ÂÑ™ÂÖàÂ∫¶: ${frontmatter.priority}`);
    if (frontmatter.tags && frontmatter.tags.length > 0) {
      console.log(`  „Çø„Ç∞: ${frontmatter.tags.join(", ")}`);
    }
  } catch (error) {
    console.error(`„Ç®„É©„Éº: ${error.message}`);
    Deno.exit(1);
  }
}
